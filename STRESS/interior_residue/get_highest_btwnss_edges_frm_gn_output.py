import numpy as np
import sys
import os

'''
This script takes as input the file generated by gncommunities (ie, the file w/btwnss scores),
and prints as output a file w/info on the critical nodes only (ie, those nodes associated w/the absolute
highest betweenness score across communities). For instance, info in the gncommunities file such as:

	The highest score in edge connectivities between communities 1 and 3 with highest edge connectivity is 999.034363
	174 281 970.892578 
	203 285 766.426147 
	207 281 879.207764 
	277 281 999.034363 

would be processed by this script to give the output:

	1 3 277 281 999.034363 

Note that:
	the 0th element is the community pair index (assigned arbitrarily just based on the order in which they appear in the GN__community_pairs_file)
	the 1st element is community A
	the 2nd element is community B
	the 3rd is the RESIDUE (not RESID) associated w/community (A?)
	the 4th is the RESIDUE (not RESID) associated w/community (B?)
	the 5th is the associated betweenness score
'''

###   To run, use:
###   python get_highest_btwnss_edges_frm_gn_output.py d1xrya__o_GN.txt d1xrya__crit_GN.txt


###   Get input and ensure correct number of args
if (len(sys.argv) != 2):
   sys.stderr.write("Usage: " + sys.argv[0] + " <inputFile> <outputDir>\n")
   sys.stderr.write("where:\n")
   sys.stderr.write("   <GN__community_pairs_file> is a text file (ex: d1xrya__o_GN.txt) produced by gncommunities, which lists all interacting community pairs in the sent \"The highest score in edge connectivities between communities...\"  \n")
   sys.exit()


##  Assign input variables
GN__community_pairs_file = sys.argv[1]
GN__community_pairs_file_to_read = open(GN__community_pairs_file, "r")
most_critical_residues_file_to_write = sys.stdout


###  Print file headers
most_critical_residues_file_to_write.write("###  Column 1: <com_pair_index> is an index designating a specific pair of interacting COMMUNITIES\n")
most_critical_residues_file_to_write.write("###  Column 2: <gn_com_pair_A> is COMMUNITY A (community numbering from GN script)\n")
most_critical_residues_file_to_write.write("###  Column 3: <gn_com_pair_B> is COMMUNITY B (community numbering from GN script)\n")
most_critical_residues_file_to_write.write("###  Column 4: <node_a> is the node id (RESIDUE) in community A\n")
most_critical_residues_file_to_write.write("###  Column 5: <node_b> is the node id (RESIDUE) in community B\n")
most_critical_residues_file_to_write.write("###  Column 6: <betweenness> is 'betweenness' value between the residues a and b\n")


###  Make and populate the following 3 dictionaries:
com_pair__to__com_A = {}
com_pair__to__com_B = {}
com_pair__to__btwnss = {}
pair_index = 0
l = 0
for line in GN__community_pairs_file_to_read:
	if "The highest score in edge connectivities between communities" in line:
		split_line = list()
		split_line = line.split()
		com_pair__to__com_A[pair_index] = split_line[8]
		com_pair__to__com_B[pair_index] = split_line[10]
		com_pair__to__btwnss[pair_index] = split_line[16]
		pair_index += 1
	l += 1


## rewind the file handle to the first line:
GN__community_pairs_file_to_read.seek(0)


###  Make and populate dictionary:  file_line__to__comm_pair
file_line__to__comm_pair = {}
pair_index = -1
l = 0
for line in GN__community_pairs_file_to_read:
	if "The highest score in edge connectivities between communities" in line:
		pair_index += 1
	file_line__to__comm_pair[l] = pair_index
	#print str(l) + "        pair index:  " + str(file_line__to__comm_pair[l])
	l += 1


## rewind the file handle to the first line:
GN__community_pairs_file_to_read.seek(0)


###  Make and populate the following 2 dictionaries:
com_pair__to__node_A = {}
com_pair__to__node_B = {}
l = 0
for line in GN__community_pairs_file_to_read:
	split_line = list()
	split_line = line.split()
	if len(split_line) == 3: ## then presumably it's a line indicating the residues and the associated edge's betweenness, such as a line like: "116 178 941.246216"
		pair_index = file_line__to__comm_pair[l]
		betwn_score = com_pair__to__btwnss[pair_index]
		if split_line[2] == betwn_score:  ## then this is the edge identified as the critical edge between communites in this pair_index
			com_pair__to__node_A[pair_index] = split_line[0]
			com_pair__to__node_B[pair_index] = split_line[1]
			## print results to output file:
			strng = str(file_line__to__comm_pair[l]) + "\t" + str(com_pair__to__com_A[pair_index]) + "\t" + str(com_pair__to__com_B[pair_index]) + "\t" + str(com_pair__to__node_A[pair_index]) + "\t" + str(com_pair__to__node_B[pair_index]) + "\t" + str(com_pair__to__btwnss[pair_index]) + "\n"
			most_critical_residues_file_to_write.write(strng)
	l += 1



GN__community_pairs_file_to_read.close()
